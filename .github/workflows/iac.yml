# Name of the workflow as it will appear in GitHub Actions UI
name: CrowdStrike FCS IAC Scan

# Limit permissions for the GITHUB_TOKEN to only what's needed
permissions:
  contents: read        # Read repository contents
  security-events: write # Write to GitHub Security tab

# Define when this workflow will run
on:
  push:
    branches: [ main ]  # Run when code is pushed to the main branch
  pull_request:
    branches: [ main ]  # Run when a PR is created or updated targeting main branch
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight UTC

# Define the jobs that make up this workflow
jobs:
  # Job for running CrowdStrike Falcon Container Security IaC scan
  fcs-scan:
    # Specifies the runner environment for this job
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub
    # Specify the environment where your secrets are stored
    environment: iac
    
    # Sequential steps that make up this job
    steps:
      # Step 1: Check out the repository code so it's available for scanning
      - name: Checkout code
        uses: actions/checkout@v4  # Use GitHub's official checkout action (version 4)

      # Step 2: Create directory for scan results
      - name: Create output directory
        run: mkdir -p scan-results
      
      # Step 3: Run the CrowdStrike Falcon Container Security scan
      - name: Run FCS IaC Scan
        uses: crowdstrike/fcs-action@v1.1.0
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
        with:
          falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
          falcon_region: 'us-2'
          path: './'                                    # Scan the entire repository
          upload_results: 'true'                        # Upload results to CrowdStrike console
          report_formats: 'sarif'                       # Generate SARIF format report
          output_path: './scan-results'                 # Where to store scan results
          project_owners: 'jason.mckenzie@crowdstrike.com'  # Contact for scan results

      # Step 4: Transform SARIF file to match GitHub's expected format
      - name: Transform SARIF file
        if: always()  # Run even if previous steps fail
        run: |
          cp ./scan-results/*-scan-results.sarif original.sarif
          # Transform severity levels to match GitHub's expectations:
          # - critical/high -> error
          # - medium -> warning
          # - low/informational -> note
          jq '
            .runs[].tool.driver.informationUri = "https://www.crowdstrike.com" |
            .runs[].tool.driver.rules[] |= (
              if .defaultConfiguration.level == "critical" or .defaultConfiguration.level == "high" then .defaultConfiguration.level = "error"
              elif .defaultConfiguration.level == "medium" then .defaultConfiguration.level = "warning"
              elif .defaultConfiguration.level == "low" or .defaultConfiguration.level == "informational" then .defaultConfiguration.level = "note"
              else .defaultConfiguration.level = "warning"
              end
            )
          ' original.sarif > scan-results.sarif

      - name: Validate SARIF file
        if: always()
        run: |
          if [ ! -f scan-results.sarif ]; then
            echo "Error: scan-results.sarif does not exist"
            exit 1
          fi
          if [ ! -s scan-results.sarif ]; then
            echo "Error: scan-results.sarif is empty"
            exit 1
          fi
          echo "SARIF file exists and has content"

      - name: Print SARIF file to screen
        if: always()  # Run even if previous steps fail
        run: |
          cat ./scan-results.sarif

      # Step 5: Upload the transformed SARIF file to GitHub Code Scanning
      - name: Upload SARIF report to GitHub Code scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()  # Run even if previous steps fail
        with:
          sarif_file: scan-results.sarif  # Path to the transformed SARIF file
